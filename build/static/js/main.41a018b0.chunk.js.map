{"version":3,"sources":["components/Recipients/useInputHandler.jsx","components/contexts/ChipsContext.jsx","components/Recipients/To.jsx","components/Recipients/Chip.jsx","components/Recipients/Chips.jsx","components/Recipients/Recipients.jsx","components/contexts/ChipsContextProvider.jsx","App.jsx","serviceWorker.js","index.js"],"names":["form","email","useInputHandler","callback","React","useState","values","setValues","handleSubmit","length","handleChange","e","persist","value","target","name","handleKeyDown","includes","key","preventDefault","resetValues","ChipsContext","createContext","StyledTextArea","styled","textarea","StyledMenu","ul","StyledMenuLi","li","optionsSet","To","forwardRef","_props","ref","addChip","useContext","showOptions","setShowOptions","options","setOptions","handleOnChange","useCallback","newOptions","filter","item","current","focus","type","onChange","onKeyDown","onBlur","autoFocus","map","id","onMouseDown","handleOnMouseDown","onClick","StyledChipEl","span","props","isChip","isValid","StyledAggChipEl","StyledAdress","StyledIcon","AggChip","text","Chip","isCollapsed","chip","onDelete","isNotFirst","test","String","toLowerCase","index","StyledLi","StyledInputLi","StyledUl","Chips","chips","inputCollapsed","setInputCollapsed","deleteChip","aggregatedChips","setAggregatedChips","isOverflowed","setIsOverflowed","chipSub","setChipSub","firstLine","setFirstLine","gotFirst","setGotFirst","chipsContainerRef","useRef","inputRef","getOverflowedEls","slice","call","childNodes","offsetTop","offsetHeight","parentNode","clientHeight","offsetLeft","offsetWidth","clientWidth","useEffect","scrollHeight","scrollWidth","overflowedEls","visibleChipsCount","visibleChipsArr","splice","setDisplayedChips","style","display","blur","uuid","_","updatedAggs","handleOnDelete","StyledRecipients","div","Recipients","ChipsContextProvider","setChips","Provider","newChips","idx","children","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41a018b0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst form = {\r\n    email: ''\r\n};\r\n\r\nconst useInputHandler = callback => {\r\n    const [values, setValues] = React.useState(form);\r\n\r\n    const handleKeyDown = e => {\r\n        if ([\"Enter\", \"Tab\", \",\"].includes(e.key)) {\r\n            e.preventDefault();\r\n            handleSubmit();\r\n        }\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        if (values.email.length < 1) {\r\n            return;\r\n        };\r\n        callback(values.email);\r\n        setValues(form);\r\n    };\r\n\r\n    const handleChange = e => {\r\n        e.persist();\r\n        let { value } = e.target;\r\n        setValues(values => ({ ...values, [e.target.name]: value }));\r\n    };\r\n\r\n    const resetValues = () => {\r\n        setValues(form);\r\n    }\r\n\r\n    return {\r\n        handleChange,\r\n        handleSubmit,\r\n        handleKeyDown,\r\n        resetValues,\r\n        values\r\n    };\r\n};\r\n\r\nexport default useInputHandler;","import React from 'react';\r\n\r\nexport const ChipsContext = React.createContext({});\r\n\r\nexport default ChipsContext;","import React from 'react';\r\nimport useInputHandler from './useInputHandler';\r\nimport { ChipsContext } from '../contexts/ChipsContext';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledTextArea = styled.textarea`\r\n  width: 100%;;\r\n  height: 30px;\r\n  box-sizing: border-box;\r\n  border-radius: 0.2rem;\r\n  color: #565656;\r\n  font: inherit;\r\n  resize: none;\r\n  overflow: hidden;\r\n  outline: none;\r\n  border: none;\r\n  background-color: transparent;\r\n`\r\nconst StyledMenu = styled.ul`\r\n  list-style-type: none;\r\n  position: absolute;\r\n  margin-top: 20px;\r\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\r\n  padding-left: 0px;\r\n`\r\nconst StyledMenuLi = styled.li`\r\n  list-style-type: none;\r\n  padding: 15px;\r\n  color: #515151;\r\n  background-color: white;\r\n  width: 250px;\r\n\r\n  &:hover {\r\n    background-color: #F8F8F8;\r\n    color: #515151;\r\n  }\r\n`\r\nconst optionsSet = [\r\n  \"dor@gmail.com\",\r\n  \"nokky@gmail.com\",\r\n  \"guy@yahoo.com\",\r\n  \"shuki@stormblack.com\",\r\n  \"or@stormblack.com\"\r\n]\r\n\r\nconst To = React.forwardRef((_props, ref) => {\r\n  const { addChip } = React.useContext(ChipsContext);\r\n  const { values, resetValues, handleChange, handleKeyDown, handleSubmit } = useInputHandler(addChip);\r\n  const [showOptions, setShowOptions] = React.useState(false);\r\n  const [options, setOptions] = React.useState(optionsSet);\r\n\r\n  const handleOnChange = React.useCallback(e => {\r\n    handleChange(e);\r\n    const newOptions = options.filter(item => {\r\n      if (item.includes(e.target.value) && e.target.value.length > 0) {\r\n        return item;\r\n      }\r\n    })\r\n    setOptions(newOptions);\r\n    if (options.length > 0) {\r\n      setShowOptions(true)\r\n    } else {\r\n      setShowOptions(false)\r\n    }\r\n    ref.current.focus();\r\n  }, [])\r\n\r\n  const handleOnMouseDown = (e, item) => {\r\n    e.preventDefault()\r\n    addChip(item)\r\n    resetValues();\r\n    setShowOptions(false)\r\n    ref.current.focus();\r\n  }\r\n\r\n  const handleBlur = () => {\r\n    setShowOptions(false);\r\n    handleSubmit();\r\n  }\r\n\r\n  const handleOnKeyDown = e => {\r\n    handleKeyDown(e);\r\n    if ([\"Enter\", \"Tab\", \",\"].includes(e.key)) {\r\n      e.preventDefault();\r\n      setShowOptions(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StyledTextArea type='text'\r\n        name='email'\r\n        value={values.email}\r\n        onChange={handleOnChange}\r\n        onKeyDown={handleOnKeyDown}\r\n        onBlur={handleBlur}\r\n        autoFocus\r\n        ref={ref}\r\n      >\r\n      </StyledTextArea>\r\n      {showOptions && (\r\n        <StyledMenu>\r\n          {options.map((item, id) => (\r\n            <StyledMenuLi key={id}\r\n              onMouseDown={e => handleOnMouseDown(e, item)}\r\n              onClick={e => e.preventDefault()}>\r\n              {item}\r\n            </StyledMenuLi>\r\n          ))}\r\n        </StyledMenu>\r\n      )\r\n      }\r\n    </>\r\n  );\r\n})\r\n\r\nexport default To;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledChipEl = styled.span`\r\n  display: inline-block;\r\n  border: ${(props) => props.isChip ? '1px solid black' : 'none'};\r\n  ${(props) => props.isValid ? 'background-color: white; border: 1px solid black;' : 'background-color: #a50000; color: white'}\r\n  border-radius: 25px;\r\n  margin: 2px;\r\n  padding: 5px 10px;\r\n`\r\nconst StyledAggChipEl = styled.span`\r\n  display: inline-block;\r\n  margin-left: 5px;\r\n  padding: 1px 10px;\r\n  border-radius: 5px;\r\n  background-color: white;\r\n  color: black;\r\n  border: 1px solid #a50000;\r\n`\r\nconst StyledAdress = styled.span`\r\n  display: inline-block;\r\n  padding: 6px 0px;;\r\n  margin: 2px 0px;\r\n`\r\nconst StyledIcon = styled.span`\r\n  &::before {\r\n    content: 'X';\r\n    margin: 0 5px;\r\n    cursor:pointer;\r\n  }\r\n`\r\nconst Chip = (props) => {\r\n  const { isCollapsed, chip, onDelete, isNotFirst } = props;\r\n  const [value, setValue] = React.useState(chip);\r\n\r\n  const isValidAdress = () => {\r\n    // this is a very long validator. maybe find elegant one?\r\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(chip).toLowerCase());\r\n  }\r\n\r\n  // use onmousedown event because it happens before blur (on parent)\r\n  const handleOnMouseDown = (e, index) => {\r\n    e.preventDefault();\r\n    onDelete(e, index);\r\n  }\r\n\r\n  return isCollapsed ?\r\n    (\r\n      <StyledAdress>{(isNotFirst ? ', ' : '') + value}</StyledAdress>\r\n    )\r\n    : (\r\n      <StyledChipEl\r\n        isValid={isValidAdress()}>\r\n        {value}\r\n        <StyledIcon onMouseDown={e => handleOnMouseDown(e)} />\r\n      </StyledChipEl>\r\n    );\r\n}\r\n\r\nexport const AggChip = (props) => {\r\n  return (\r\n    <StyledAggChipEl>\r\n      {props.text} more\r\n    </StyledAggChipEl>\r\n  )\r\n}\r\n\r\nexport default Chip;\r\n","import React from 'react';\r\nimport To from './To'\r\nimport Chip, { AggChip } from './Chip'\r\nimport { ChipsContext } from '../contexts/ChipsContext';\r\nimport useInputHandler from './useInputHandler';\r\nimport styled from 'styled-components';\r\nimport uuid from 'react-uuid'\r\n\r\nconst StyledLi = styled.li`\r\n  display: inline-flex;\r\n  list-style: none; \r\n`\r\nconst StyledInputLi = styled.li`\r\n  list-style: none;\r\n  flex-grow: 1;\r\n`\r\nconst StyledUl = styled.ul`\r\n  width: 800px;\r\n  display: inline-flex;\r\n  flex-wrap: wrap; /*important for new row*/\r\n  align-items: center;\r\n  padding: 1px;\r\n  margin: 0;\r\n  overflow: ${(props) => props.isCollapsed ? 'hidden' : 'visible'};\r\n  height: ${(props) => props.isCollapsed ? '44px' : 'auto'};\r\n`\r\n\r\nconst Chips = () => {\r\n  const { chips, inputCollapsed, setInputCollapsed, addChip, deleteChip } = React.useContext(ChipsContext);\r\n  const [aggregatedChips, setAggregatedChips] = React.useState(chips);\r\n  const [isOverflowed, setIsOverflowed] = React.useState(false);\r\n  const [chipSub, setChipSub] = React.useState(0);\r\n  const [firstLine, setFirstLine] = React.useState(0);\r\n  const [gotFirst, setGotFirst] = React.useState(0);\r\n  const { handleSubmit } = useInputHandler(addChip);\r\n  const chipsContainerRef = React.useRef(null);\r\n  const inputRef = React.useRef(null);\r\n\r\n  const handleBlur = () => {\r\n    handleSubmit();\r\n    inputRef.current.blur();\r\n    inputRef.current.value = '';\r\n    inputRef.current.style.display = \"none\";\r\n    setInputCollapsed(true);\r\n  }\r\n\r\n  const handleFocus = () => {\r\n    inputRef.current.style.display = \"block\";\r\n    inputRef.current.focus();\r\n    setInputCollapsed(false);\r\n  }\r\n\r\n  const handleOnDelete = (_, index) => {\r\n    setGotFirst(false);\r\n    setChipSub(0);\r\n    const updatedAggs = deleteChip(index);\r\n    setAggregatedChips(updatedAggs);\r\n  }\r\n\r\n  const getOverflowedEls = () => {\r\n    if (chipsContainerRef.current) {\r\n      // convert nodeList to array and exclude the input \r\n      const chipsArr = [].slice.call(chipsContainerRef.current.childNodes);\r\n      const hiddenChipsArr = chipsArr.filter(chip => {\r\n        if (chip.childNodes.length > 0) {\r\n          if (chip.childNodes[0].type !== 'textarea') {\r\n            return (chip.offsetTop + chip.offsetHeight > chip.parentNode.clientHeight)\r\n              || (chip.offsetLeft + chip.offsetWidth > chip.parentNode.clientWidth);\r\n          }\r\n        } else {\r\n          return (chip.offsetTop + chip.offsetHeight > chip.parentNode.clientHeight)\r\n            || (chip.offsetLeft + chip.offsetWidth > chip.parentNode.clientWidth);\r\n        }\r\n      });\r\n      return hiddenChipsArr;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  const setDisplayedChips = chipSub => {\r\n    let overflowedEls = 0;\r\n    // getting first line, only once and remeber.\r\n    // will get reset when after deleting - when first line maybe changed \r\n    if (!gotFirst) {\r\n      overflowedEls = getOverflowedEls().length;\r\n      setFirstLine(overflowedEls)\r\n      setGotFirst(true)\r\n    } else {\r\n      overflowedEls = firstLine;\r\n    }\r\n    const visibleChipsCount = chips.length - overflowedEls;\r\n    const visibleChipsArr = [...chips].splice(0, visibleChipsCount - chipSub);\r\n    setAggregatedChips(visibleChipsArr)\r\n  }\r\n\r\n  const getChips = () => {\r\n    if (inputCollapsed && chipSub > 0) {\r\n      return aggregatedChips;\r\n    } else {\r\n      return chips;\r\n    }\r\n  }\r\n\r\n  // light overflow checker\r\n  const isEllipsisActive = e => {\r\n    return (e.current.offsetHeight < e.current.scrollHeight) || (e.current.offsetWidth < e.current.scrollWidth);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (isEllipsisActive(chipsContainerRef) && !isOverflowed) {\r\n      setIsOverflowed(!isOverflowed);\r\n    }\r\n    // condition for aggregating \r\n    if (inputCollapsed && getOverflowedEls().length > 0) {\r\n      setDisplayedChips(chipSub)\r\n      let more = chipSub + 1;\r\n      setChipSub(more);\r\n    }\r\n  }, [chips, inputCollapsed, aggregatedChips])\r\n\r\n  return (\r\n    <StyledUl isCollapsed={inputCollapsed}\r\n      ref={chipsContainerRef}\r\n      onClick={handleFocus}\r\n      onBlur={handleBlur}>\r\n      {\r\n        getChips().map((chip, index) => (\r\n          <StyledLi key={uuid()} >\r\n            <Chip isNotFirst={index}\r\n              index={uuid()}\r\n              chip={chip}\r\n              isCollapsed={inputCollapsed}\r\n              onDelete={e => handleOnDelete(e, index)} />\r\n          </StyledLi>\r\n        ))\r\n      }\r\n      <StyledLi>\r\n        {\r\n          inputCollapsed && chipSub > 0 &&\r\n          (chips.length - aggregatedChips.length) > 0 &&\r\n          < AggChip text={chips.length - aggregatedChips.length || ''} />\r\n        }\r\n      </StyledLi>\r\n      <StyledInputLi>\r\n        <To ref={inputRef} />\r\n      </StyledInputLi>\r\n    </StyledUl>\r\n\r\n  );\r\n}\r\n\r\nexport default Chips;\r\n","import React from 'react';\r\nimport Chips from './Chips';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledRecipients = styled.div`\r\n  width: 800px;\r\n  height: 44px;\r\n  height: auto;\r\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\r\n`\r\n\r\nconst Recipients = () => {\r\n  return (\r\n    <StyledRecipients>\r\n      <Chips />\r\n    </StyledRecipients>\r\n  );\r\n}\r\n\r\nexport default Recipients;\r\n","import React from \"react\";\r\nimport { ChipsContext } from \"./ChipsContext\";\r\n\r\nconst ChipsContextProvider = (props) => {\r\n  const [chips, setChips] = React.useState([]);\r\n  const [inputCollapsed, setInputCollapsed] = React.useState(false);\r\n\r\n  const addChip = email => {\r\n    setChips([...chips, email]);\r\n  };\r\n\r\n  const deleteChip = index => {\r\n    let newChips = [...chips].filter((_, idx) => {\r\n      return index !== idx;\r\n    })\r\n    setChips(newChips);\r\n    return newChips;\r\n  }\r\n\r\n  return (\r\n    <ChipsContext.Provider value={{ chips, setChips, addChip, deleteChip, inputCollapsed, setInputCollapsed }}>\r\n      {props.children}\r\n    </ChipsContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ChipsContextProvider;","import React from 'react';\nimport Recipients from './components/Recipients/Recipients';\nimport ChipsContextProvider from './components/contexts/ChipsContextProvider';\n\n\nconst App = () => {\n  return (\n    <ChipsContextProvider>\n      <Recipients />\n    </ChipsContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}